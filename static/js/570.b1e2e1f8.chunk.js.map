{"version":3,"file":"static/js/570.b1e2e1f8.chunk.js","mappings":"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","sources":["components/Profile/My posts/ProfileInfo/ProfileInfo.module.css","components/Profile/My posts/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/My posts/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/My posts/MyPosts.module.css?16f6","webpack://samurai-way/./src/components/Profile/My posts/Post/Post.module.css?6083","components/Profile/My posts/Post/Post.tsx","components/Profile/My posts/MyPosts.tsx","components/Profile/My posts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormControls/FormsControls.tsx","hoc/AuthRedirect.tsx","utils/validators/validators.tsx","webpack://samurai-way/./src/components/common/FormControls/FormsControls.module.css?3030","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__tPzpV\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatusThunk: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false) //данные хранятся на строне реакта\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]) //синхронизация пропсов и стейта\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const diactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatusThunk(status) //отправить родителю, чтобы данные сохранились в бизнесе\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || \"no status\"}</span>\r\n                </div>}\r\n\r\n            {editMode && <div>\r\n                <input autoFocus={true} onBlur={diactivateEditMode} onChange={onStatusChange} value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport {ProfileUserPropsType} from \"../../../../Redux/Profile-reducer\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileUserPropsType\r\n    status: string\r\n    updateStatusThunk: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({profile, status, updateStatusThunk}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src=\"https://img2.fonwall.ru/o/gw/gory-zakat-solnce.jpg?route=thumb&h=350\"/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large}/>\r\n                {profile.fullName}\r\n                {profile.lookingForAJobDescription}\r\n                <ProfileStatusWithHooks status={status} updateStatusThunk={updateStatusThunk}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__P8WQf\",\"posts\":\"MyPosts_posts__CCgrz\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__nI8sT\"};","import React from 'react';\r\nimport s from \"./Post.module.css\"\r\nimport {PostType} from \"../../../../Redux/State\";\r\n\r\nconst Post = (props: PostType) => {\r\n\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://cdn1.flamp.ru/de5d137bb9fffdca9df095726d4100e6.jpeg\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>Like</span>\r\n                { props.like}\r\n            </div>\r\n        </div>)\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormControls/FormsControls\";\r\nimport {ActionTypes, PostType} from \"../../../Redux/State\";\r\n\r\nexport type MessageType = {\r\n    newPostText: string\r\n    posts: Array<PostType>\r\n    addPost?: (newMessage: string) => void\r\n    updateNewPostText?: (newText: string) => void\r\n    dispatch?: (action: ActionTypes) => void\r\n    newMessageText?: string\r\n}\r\n\r\nconst MyPosts = React.memo((props: MessageType) => {\r\n    console.log('yo')\r\n    let postElement = props.posts.map(p => <Post key={p.id} message={p.message} like={p.like}/>).reverse()\r\n\r\n    // let newPostElement = React.createRef <HTMLTextAreaElement>()\r\n\r\n    let onAddPost = (values: any) => {\r\n        if (props.addPost) {\r\n            props.addPost(values.newPostText)\r\n        }\r\n    }\r\n\r\n    /*  let onPostChange = () => {\r\n          if (newPostElement.current) {\r\n              let text = newPostElement.current.value\r\n              if (props.updateNewPostText) {\r\n                  props.updateNewPostText(text)\r\n              }\r\n          }\r\n      }\r\n  */\r\n\r\n    return <div className={s.postsBlock}>\r\n        My Posts\r\n        <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n\r\n        <div className={s.posts}>\r\n            {postElement}\r\n        </div>\r\n    </div>\r\n});\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newPostText\" validate={[required, maxLength10]}\r\n                       placeholder=\"Post message\"/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormDataType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../Redux/Profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {ActionTypes, RootStateType} from \"../../../Redux/State\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n/*type ContainerNewType = {\r\n    store: Store<ReduxStateType, ActionTypes>\r\n}\r\n\r\nconst MyPostsContainer1 = (props: ContainerNewType) => {\r\n    let state = props.store.getState().messagePage\r\n    let newPostElement = React.createRef <HTMLTextAreaElement>()\r\n\r\n    let addPost = () => {\r\n        props.store.dispatch(addPostActionCreator(''))\r\n    }\r\n\r\n    let onPostChange = (text: string) => {\r\n            props.store.dispatch(updateNewPostActionCreator(text))\r\n    }\r\n\r\n\r\n    return (\r\n        <MyPosts newPostText={state.newPostText} posts={state.posts}\r\n                 updateNewPostText={onPostChange} addPost={addPost}/>\r\n    )\r\n\r\n};*/\r\n\r\n//данные из стейна, пропсы\r\nlet mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        newPostText: state.messagePage.newPostText,\r\n        posts: state.messagePage.posts\r\n    }\r\n}\r\n\r\n//колбеки\r\nlet mapDispatchToProps = (dispatch: (action: ActionTypes) => void) => {\r\n    return {\r\n        /*updateNewPostText: (text: string) => {\r\n            dispatch(updateNewPostActionCreator(text))\r\n        },*/\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./My posts/ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./My posts/MyPostsContainer\";\r\nimport {ProfileUserPropsType} from \"../../Redux/Profile-reducer\";\r\n\r\n\r\nexport type ProfileNewType = {\r\n    profile: ProfileUserPropsType\r\n    status: string\r\n    updateStatusThunk: (status: string) => void\r\n}\r\n\r\nconst Profile = (props: ProfileNewType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatusThunk={props.updateStatusThunk}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfileThunk, getStatusThunk, ProfileUserPropsType, updateStatusThunk} from \"../../Redux/Profile-reducer\";\r\nimport {ReduxStateType} from \"../../Redux/Redux-Stor\";\r\nimport {ProfilePageType} from \"../../Redux/State\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport withAuthRedirect from \"../../hoc/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {authAPI} from \"../../api/Api\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getProfileThunk: (userId: string) => void\r\n    getStatusThunk: (userId: string) => void\r\n    updateStatusThunk: (status: string) => void\r\n}\r\n\r\ntype ProfileContainerPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component <PropsType, ProfilePageType> {\r\n\r\n    componentDidMount() {\r\n\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = '26538'\r\n\r\n            console.log(this.props.authorizedUserId)\r\n\r\n            // userId = this.props.authorizedUserId ? this.props.authorizedUserId.toString() : ''\r\n            /*if(userId) {\r\n                this.props.history.push('/login')\r\n            }*/\r\n\r\n\r\n            /*String(this.props.authorizedUserId)*/\r\n            // '26538'\r\n        }\r\n\r\n        this.props.getProfileThunk(userId)\r\n        this.props.getStatusThunk(userId)\r\n\r\n\r\n        /*ProfileAPI.getProfile(userId).then(response => {\r\n            this.props.setUserProfile(response.data)\r\n        })*/\r\n        /* axios.get(`https://social-network.samuraijs.com/api/1.0/profile/` + userId).then(response => {\r\n\r\n         })*/\r\n    }\r\n\r\n    render() {\r\n\r\n        /* if (!this.props.isAuth) return <Redirect to={'/login'}/>*/\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                         updateStatusThunk={this.props.updateStatusThunk}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n};\r\n\r\n//хок\r\nlet AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n/*AuthRedirectComponent = connect(mapStateToPropsForRedirect)(AuthRedirectComponent)*/\r\n\r\n\r\nexport type mapStateToPropsType = {\r\n    profile: ProfileUserPropsType\r\n    status: string\r\n    authorizedUserId: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: ReduxStateType): mapStateToPropsType => ({\r\n    profile: state.messagePage.profile,\r\n    status: state.messagePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\n/*\r\nlet mapStateToPropsForRedirect = (state: ReduxStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n*/\r\n\r\n\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getProfileThunk, getStatusThunk, updateStatusThunk}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)","import React from 'react';\r\nimport {Field, WrappedFieldInputProps, WrappedFieldMetaProps} from \"redux-form\";\r\nimport s from './FormsControls.module.css'\r\nimport {required} from \"../../../utils/validators/validators\";\r\n\r\ntype FormsControls = {\r\n    input: WrappedFieldInputProps\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\n\r\nconst FormControl: React.FC<FormsControls> = ({input, meta: {touched, error}, children,...props}) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Textarea: React.FC<FormsControls> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}> <textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<FormsControls> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\n/*\r\nexport const CreateField = (placeholder: string | null, name: string, validate: typeof required[], component: React.FC<FormsControls>, props: any, text: string | null) => (\r\n        <div>\r\n            <Field placeholder={placeholder} name={name} component={validate} validate={component} {...props}/> {text}\r\n        </div>\r\n    )\r\n*/\r\n\r\n/*\r\nexport const Textarea: React.FC<FormsControls> = ({input, meta, ...props}) => {\r\n    /!*const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <textarea {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    );*!/\r\n};\r\n\r\nexport const Input: React.FC<FormsControls> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <input {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n};*/\r\n","import React, {Component, ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxStateType} from \"../Redux/Redux-Stor\";\r\n\r\n\r\ntype IsAuthPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: ReduxStateType): IsAuthPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nfunction withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: IsAuthPropsType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n};\r\n\r\nexport default withAuthRedirect;","import React from 'react';\r\n\r\nexport const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required!'\r\n};\r\n\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__mwFpC\",\"error\":\"FormsControls_error__TXWsV\",\"formSummaryError\":\"FormsControls_formSummaryError__avrPo\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatusThunk","onChange","e","currentTarget","value","profile","src","className","s","photos","large","fullName","lookingForAJobDescription","Preloader","message","like","MyPosts","React","console","log","postElement","posts","map","p","id","reverse","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","validate","required","placeholder","connect","state","messagePage","dispatch","addPostActionCreator","ProfileContainer","userId","this","match","params","authorizedUserId","getProfileThunk","getStatusThunk","withAuthRedirect","compose","auth","isAuth","withRouter","FormControl","input","meta","touched","error","children","hasError","restProps","Input","mapStateToPropsForRedirect","Component","to","maxLength","length","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}
{"version":3,"file":"static/js/563.841ba0c6.chunk.js","mappings":"mOACA,EAAmC,sCAAnC,EAAqF,+BAArF,EAA8H,6B,6BCOjHA,EAAyB,SAACC,GAEnC,OAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAKC,EAAL,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAASD,EAAMI,QAAzC,eAAKA,EAAL,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAeV,OACI,4BACMF,IACE,4BACG,kCADH,MACkB,iBAAMK,cAjBX,WACrBJ,GAAY,IAgBc,SAAwCH,EAAMI,QAAU,iBAG7EF,IAAY,0BACT,kBAAOM,WAAW,EAAMC,OAjBT,WACvBN,GAAY,GACZH,EAAMU,kBAAkBN,IAeoCO,SAZzC,SAACC,GACpBP,EAAUO,EAAEC,cAAcC,QAW4DA,MAAOV,U,mBCrCrG,GAAgB,iBAAmB,2CCqDnC,GAFiCW,EAAAA,EAAAA,GAA2C,CAACC,KAAM,gBAAlDD,EAzCiE,SAAC,GAIO,IAHHE,EAGE,EAHFA,aACAC,EAEE,EAFFA,QACAC,EACE,EADFA,MAEnG,OAAO,kBAAMC,SAAUH,EAAhB,WACH,0BAAK,uCAEJE,IAAS,gBAAKE,UAAWC,EAAAA,iBAAhB,SACLH,KAIL,4BACI,qCADJ,MACuBI,EAAAA,EAAAA,IAA6B,YAAa,WAAY,GAAIC,EAAAA,QAEjF,4BACI,6CADJ,MAEkBD,EAAAA,EAAAA,IAA6B,GAAI,iBAAkB,GAAIC,EAAAA,GAAO,CAACC,KAAM,iBAGvF,4BACI,kDADJ,KAEKF,EAAAA,EAAAA,IAA6B,yBAA0B,4BAA6B,GAAIG,EAAAA,QAI7F,4BACI,oCADJ,KAEKH,EAAAA,EAAAA,IAA6B,WAAY,UAAW,GAAIG,EAAAA,QAE7D,4BACI,oCADJ,KACsBC,OAAOC,KAAKV,EAAQW,UAAUC,KAAI,SAAAC,GACpD,OAAO,gBAAeV,UAAWC,EAAAA,QAA1B,UACH,yBAAIS,EAAJ,MAAWR,EAAAA,EAAAA,IAAYQ,EAAK,YAAcA,EAAK,GAAIP,EAAAA,QADtCO,eC0BvBC,EAA8C,SAAC,GAAoC,IAAnCd,EAAkC,EAAlCA,QAASe,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WACpE,OAAO,gCACFD,IAAW,0BACR,mBAAQE,QAASD,EAAjB,qBAEJ,4BACI,qCADJ,KACuBhB,EAAQkB,aAE/B,4BACI,6CADJ,KAC+BlB,EAAQmB,eAAiB,MAAQ,QAE/DnB,EAAQmB,iBACL,4BACI,mDADJ,KACqCnB,EAAQoB,8BAGjD,4BACI,oCADJ,KACsBpB,EAAQqB,YAE9B,4BACI,oCADJ,KACsBZ,OAAOC,KAAKV,EAAQW,UAAUC,KAAI,SAAAC,GACpD,OAAO,SAACS,EAAD,CAAmBC,aAAcV,EACxBW,aAAcxB,EAAQW,SAASE,IAD1BA,aAapBS,EAAiC,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aAC1D,OAAO,iBAAKrB,UAAWC,EAAhB,WAA2B,uBAAImB,IAA/B,KAAmDC,MAI9D,EA3FoD,SAAC,GAOO,IANHxB,EAME,EANFA,QACAd,EAKE,EALFA,OACAM,EAIE,EAJFA,kBACAuB,EAGE,EAHFA,QACAU,EAEE,EAFFA,UACAC,EACE,EADFA,YAErD,GAA8B3C,EAAAA,EAAAA,WAAS,GAAvC,eAAKC,EAAL,KAAeC,EAAf,KAEA,IAAKe,EACD,OAAO,SAAC2B,EAAA,EAAD,IAiBX,OACI,0BACI,iBAAKxB,UAAWC,EAAhB,WACI,gBAAKwB,IAAK5B,EAAQ6B,OAAOC,OAASC,EAAW5B,UAAWC,IACvDW,IAAW,kBAAOR,KAAM,OAAQd,SAlBnB,SAACuC,GACnBA,EAAMC,OAAOC,OACbT,EAAUO,EAAMC,OAAOC,MAAM,OAkBxBlD,GACK,SAAC,EAAD,CAAiBkB,SAflB,SAACiC,GACdT,EAAYS,GAAUC,MAClB,WACInD,GAAY,OAY+Be,QAASA,EAASqC,cAAerC,KACtE,SAACc,EAAD,CAAad,QAASA,EAASe,QAASA,EAASC,WAAY,WAC3D/B,GAAY,OAGpB,SAACJ,EAAD,CAAwBK,OAAQA,EAAQM,kBAAmBA,U,UCzD3E,EAA6B,4BAA7B,EAAiE,uBCAjE,EAAuB,mBCiBvB,EAda,SAACV,GAGV,OACI,iBAAKqB,UAAWC,EAAhB,UAEKtB,EAAMwD,SACP,4BACI,mCACExD,EAAMyD,Y,oBCIlBC,EAAUC,EAAAA,MAAW,SAAC3D,GAExB,IAAI4D,EAAc5D,EAAM6D,MAAM/B,KAAI,SAAAgC,GAAC,OAAI,SAAC,EAAD,CAAiBN,QAASM,EAAEN,QAASC,KAAMK,EAAEL,MAAlCK,EAAEC,OAAyCC,UAoB7F,OAAO,iBAAK3C,UAAWC,EAAhB,sBAEH,SAAC2C,EAAD,CAAqB7C,SAlBT,SAAC8C,GACTlE,EAAMmE,SACNnE,EAAMmE,QAAQD,EAAOE,iBAkBzB,gBAAK/C,UAAWC,EAAhB,SACKsC,UAUPS,GAAcC,EAAAA,EAAAA,GAAiB,IAgB/BL,GAAsBlD,EAAAA,EAAAA,GAAwB,CAACC,KAAM,yBAA/BD,EAdsC,SAAC,GAAoB,IAAnBE,EAAkB,EAAlBA,aAChE,OACI,kBAAMG,SAAUH,EAAhB,WACI,0BACI,SAACsD,EAAA,EAAD,CAAOC,UAAW9C,EAAAA,GAAU+C,KAAK,cAAcC,SAAU,CAACC,EAAAA,EAAUN,GAC7DO,YAAY,oBAEvB,0BACI,iDAQhB,I,SClBA,GAFyBC,EAAAA,EAAAA,KApBH,SAACC,GACnB,MAAO,CACHV,YAAaU,EAAMC,YAAYX,YAC/BP,MAAOiB,EAAMC,YAAYlB,UAKR,SAACmB,GACtB,MAAO,CAIHb,QAAS,SAACC,GACNY,GAASC,EAAAA,EAAAA,IAAqBb,QAMjBS,CAA6CnB,GC1BtE,EAXgB,SAAC1D,GACb,OACI,4BACI,SAAC,EAAD,CAAakB,QAASlB,EAAMkB,QAAS0B,YAAa5C,EAAM4C,YAAaxC,OAAQJ,EAAMI,OACtEM,kBAAmBV,EAAMU,kBAAmBuB,QAASjC,EAAMiC,QAC3DU,UAAW3C,EAAM2C,aAC9B,SAAC,EAAD,Q,8BCWNuC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAkCD,OAlCCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MAEF,WACI,IAAIC,EAASC,KAAKpF,MAAMqF,MAAMC,OAAOH,OAChCA,IACDA,EAAS,SAGbC,KAAKpF,MAAMuF,gBAAgBJ,GAC3BC,KAAKpF,MAAMwF,eAAeL,KAE7B,+BAED,WACIC,KAAKK,mBACR,gCAED,SAAmBC,EAAgCC,EAAsCC,GAClFR,KAAKpF,MAAMqF,MAAMC,OAAOH,QAAUO,EAAUL,MAAMC,OAAOH,QACxDC,KAAKK,mBAEZ,oBAED,WAGI,OACI,0BACI,SAAC,GAAD,kBAAaL,KAAKpF,OAAlB,IAAyBiC,SAAUmD,KAAKpF,MAAMqF,MAAMC,OAAOH,OAClDjE,QAASkE,KAAKpF,MAAMkB,QAASd,OAAQgF,KAAKpF,MAAMI,OAChDM,kBAAmB0E,KAAKpF,MAAMU,kBAC9BiC,UAAWyC,KAAKpF,MAAM2C,mBAG1C,EAlCCuC,CAAyBvB,EAAAA,WAoE/B,IA7B4BkC,EAAAA,EAAAA,GAAiBX,IA6B9BY,EAAAA,EAAAA,KACXjB,EAAAA,EAAAA,KAnBkB,SAACC,GAAD,MAAiD,CACnE5D,QAAS4D,EAAMC,YAAY7D,QAC3Bd,OAAQ0E,EAAMC,YAAY3E,OAC1B2F,iBAAkBjB,EAAMkB,KAAKjC,GAC7BkC,OAAQnB,EAAMkB,KAAKC,UAeM,CAACV,gBAAAA,EAAAA,GAAiBC,eAAAA,EAAAA,GAAgB9E,kBAAAA,EAAAA,GAAmBiC,UAAAA,EAAAA,GAAWC,YAAAA,EAAAA,KACzFsD,EAAAA,GACAL,EAAAA,EAHJ,CAIEX,K,+PC7FIiB,EAAuC,SAAC,GAAwD,EAAvDC,MAAwD,IAAD,IAAhDC,KAAOC,EAAyC,EAAzCA,QAASnF,EAAgC,EAAhCA,MAAQoF,EAAwB,EAAxBA,SACpEC,IAD4F,YACjFF,GAAWnF,GAE5B,OACI,iBAAKE,UAAWC,EAAAA,EAAAA,YAAgB,KAAOkF,EAAWlF,EAAAA,EAAAA,MAAU,IAA5D,WACI,yBACKiF,IAEJC,IAAY,0BAAOrF,QAKnBO,EAAoC,SAAC1B,GAC9C,IAAOoG,EAAuCpG,EAAvCoG,MAA0BK,GAAazG,EAAhCqG,KAAgCrG,EAA1BuG,UAApB,OAA8CvG,EAA9C,IACA,OAAO,UAACmG,GAAD,kBAAiBnG,GAAjB,mBAAyB,uCAAcoG,GAAWK,SAGhDjF,EAAiC,SAACxB,GAC3C,IAAOoG,EAAuCpG,EAAvCoG,MAA0BK,GAAazG,EAAhCqG,KAAgCrG,EAA1BuG,UAApB,OAA8CvG,EAA9C,IACA,OAAO,SAACmG,GAAD,kBAAiBnG,GAAjB,cAAwB,oCAAWoG,GAAWK,QAGlD,SAASlF,EAAyCqD,EACAH,EACAiC,EACAlC,GACwB,IAAxBxE,EAAuB,uDAAf,GAAI2G,EAAW,uDAAJ,GACxE,OAAO,4BACH,SAAC,KAAD,QAAO/B,YAAaA,EAAaH,KAAMA,EAChCC,SAAUgC,EACVlC,UAAWA,GACPxE,IAJR,IAKC2G,O,gGClCRC,EAA6B,SAAC9B,GAAD,MAA6C,CAC1EmB,OAAQnB,EAAMkB,KAAKC,SAevB,IAXA,SAA6BY,GAQzB,OADqChC,EAAAA,EAAAA,IAAQ+B,EAAR/B,EANrC,SAA2B7E,GACvB,IAAKiG,EAAwBjG,EAAxBiG,OAAWQ,GAAhB,OAA6BzG,EAA7B,GACA,OAAKiG,GACE,SAACY,GAAD,UAAeJ,KADF,SAAC,KAAD,CAAUK,GAAI,gB,4ECfnC,IAAMnC,EAA+B,SAAC7D,GACzC,IAAIA,EACJ,MAAO,sBAGEwD,EAAmB,SAACyC,GAAD,OAA2C,SAACjG,GACxE,GAAIA,GAASA,EAAMkG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCR3C,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,kJCG1G,SAASE,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,IAAIG,EAAY,MAAPJ,EAAc,KAAyB,qBAAXK,QAA0BL,EAAIK,OAAOC,WAAaN,EAAI,cAE3F,GAAU,MAANI,EAAJ,CACA,IAIIG,EAAIC,EAJJC,EAAO,GACPC,GAAK,EACLC,GAAK,EAIT,IACE,IAAKP,EAAKA,EAAGQ,KAAKZ,KAAQU,GAAMH,EAAKH,EAAGS,QAAQC,QAC9CL,EAAKM,KAAKR,EAAG3G,QAETqG,GAAKQ,EAAKX,SAAWG,GAH4BS,GAAK,IAK5D,MAAOM,GACPL,GAAK,EACLH,EAAKQ,EACL,QACA,IACON,GAAsB,MAAhBN,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIO,EAAI,MAAMH,GAIlB,OAAOC,GFtBuB,CAAqBT,EAAKC,KAAM,EAAAgB,EAAA,GAA2BjB,EAAKC,IGLjF,WACb,MAAM,IAAIiB,UAAU,6IHIgF","sources":["webpack://samurai-way/./src/components/Profile/My posts/ProfileInfo/ProfileInfo.module.css?ae29","components/Profile/My posts/ProfileInfo/ProfileStatusWithHooks.tsx","webpack://samurai-way/./src/components/Profile/My posts/ProfileInfo/ProfileDataForm.module.css?afdb","components/Profile/My posts/ProfileInfo/ProfileDataForm.tsx","components/Profile/My posts/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/My posts/MyPosts.module.css?16f6","webpack://samurai-way/./src/components/Profile/My posts/Post/Post.module.css?6083","components/Profile/My posts/Post/Post.tsx","components/Profile/My posts/MyPosts.tsx","components/Profile/My posts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormControls/FormsControls.tsx","hoc/AuthRedirect.tsx","utils/validators/validators.tsx","webpack://samurai-way/./src/components/common/FormControls/FormsControls.module.css?3030","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__tPzpV\",\"mainPhoto\":\"ProfileInfo_mainPhoto__E-rUq\",\"contact\":\"ProfileInfo_contact__X7t9C\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatusThunk: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false) //данные хранятся на строне реакта\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]) //синхронизация пропсов и стейта\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const diactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatusThunk(status) //отправить родителю, чтобы данные сохранились в бизнесе\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                   <b>Status</b>: <span onDoubleClick={activateEditMode}>{props.status || \"no status\"}</span>\r\n                </div>}\r\n\r\n            {editMode && <div>\r\n                <input autoFocus={true} onBlur={diactivateEditMode} onChange={onStatusChange} value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formSummaryError\":\"ProfileDataForm_formSummaryError__7iCAu\"};","import React from \"react\";\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../../common/FormControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from './ProfileDataForm.module.css'\r\nimport {ProfileUserPropsType} from \"../../../../Redux/Profile-reducer\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileUserPropsType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileUserPropsType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileUserPropsType, PropsType> & PropsType> = ({\r\n                                                                                                       handleSubmit,\r\n                                                                                                       profile,\r\n                                                                                                       error\r\n                                                                                                   }) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>save</button></div>\r\n\r\n        {error && <div className={s.formSummaryError}>\r\n            {error}\r\n        </div>\r\n\r\n        }\r\n        <div>\r\n            <b>Full name</b>: {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a\r\n                job</b>: {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n        </div>\r\n\r\n        <div>\r\n            <b>My professional skills</b>:\r\n            {createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n        </div>\r\n\r\n\r\n        <div>\r\n            <b>About me</b>:\r\n            {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n                <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileUserPropsType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport {ContactPropsType, ProfileUserPropsType} from \"../../../../Redux/Profile-reducer\";\r\nimport userPhoto from '../../../../assets/images/user.png'\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileUserPropsType\r\n    status: string\r\n    updateStatusThunk: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: any) => void\r\n    saveProfile: (profile: ProfileUserPropsType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({\r\n                                                         profile,\r\n                                                         status,\r\n                                                         updateStatusThunk,\r\n                                                         isOwner,\r\n                                                         savePhoto,\r\n                                                         saveProfile\r\n                                                     }) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const mainPhotoSelected = (event: ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files) {\r\n            savePhoto(event.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileUserPropsType) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {isOwner && <input type={'file'} onChange={mainPhotoSelected}/>}\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm onSubmit={onSubmit} profile={profile} initialValues={profile}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} toEditMode={() => {\r\n                        setEditMode(true)\r\n                    }}/>}\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatusThunk={updateStatusThunk}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileUserPropsType\r\n    isOwner: boolean\r\n    toEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, toEditMode}) => {\r\n    return <>\r\n        {isOwner && <div>\r\n            <button onClick={toEditMode}>edit</button>\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professionals skills</b>: {profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key}\r\n                            contactValue={profile.contacts[key as keyof ContactPropsType]}/>\r\n        })}\r\n        </div>\r\n    </>\r\n}\r\n\r\n\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nexport const Contact: React.FC<ContactType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__P8WQf\",\"posts\":\"MyPosts_posts__CCgrz\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__nI8sT\"};","import React from 'react';\r\nimport s from \"./Post.module.css\"\r\nimport {PostType} from \"../../../../Redux/State\";\r\n\r\nconst Post = (props: PostType) => {\r\n\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            {/*<img src=\"https://cdn1.flamp.ru/de5d137bb9fffdca9df095726d4100e6.jpeg\"/>*/}\r\n            {props.message}\r\n            <div>\r\n                <span>Like</span>\r\n                { props.like}\r\n            </div>\r\n        </div>)\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormControls/FormsControls\";\r\nimport {ActionTypes, PostType} from \"../../../Redux/State\";\r\n\r\nexport type MessageType = {\r\n    newPostText: string\r\n    posts: Array<PostType>\r\n    addPost?: (newMessage: string) => void\r\n    updateNewPostText?: (newText: string) => void\r\n    dispatch?: (action: ActionTypes) => void\r\n    newMessageText?: string\r\n}\r\n\r\nconst MyPosts = React.memo((props: MessageType) => {\r\n\r\n    let postElement = props.posts.map(p => <Post key={p.id} message={p.message} like={p.like}/>).reverse()\r\n\r\n    // let newPostElement = React.createRef <HTMLTextAreaElement>()\r\n\r\n    let onAddPost = (values: any) => {\r\n        if (props.addPost) {\r\n            props.addPost(values.newPostText)\r\n        }\r\n    }\r\n\r\n    /*  let onPostChange = () => {\r\n          if (newPostElement.current) {\r\n              let text = newPostElement.current.value\r\n              if (props.updateNewPostText) {\r\n                  props.updateNewPostText(text)\r\n              }\r\n          }\r\n      }\r\n  */\r\n\r\n    return <div className={s.postsBlock}>\r\n        My Posts\r\n        <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n\r\n        <div className={s.posts}>\r\n            {postElement}\r\n        </div>\r\n    </div>\r\n});\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newPostText\" validate={[required, maxLength10]}\r\n                       placeholder=\"Post message\"/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormDataType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../Redux/Profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {ActionTypes, RootStateType} from \"../../../Redux/State\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n/*type ContainerNewType = {\r\n    store: Store<ReduxStateType, ActionTypes>\r\n}\r\n\r\nconst MyPostsContainer1 = (props: ContainerNewType) => {\r\n    let state = props.store.getState().messagePage\r\n    let newPostElement = React.createRef <HTMLTextAreaElement>()\r\n\r\n    let addPost = () => {\r\n        props.store.dispatch(addPostActionCreator(''))\r\n    }\r\n\r\n    let onPostChange = (text: string) => {\r\n            props.store.dispatch(updateNewPostActionCreator(text))\r\n    }\r\n\r\n\r\n    return (\r\n        <MyPosts newPostText={state.newPostText} posts={state.posts}\r\n                 updateNewPostText={onPostChange} addPost={addPost}/>\r\n    )\r\n\r\n};*/\r\n\r\n//данные из стейна, пропсы\r\nlet mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        newPostText: state.messagePage.newPostText,\r\n        posts: state.messagePage.posts\r\n    }\r\n}\r\n\r\n//колбеки\r\nlet mapDispatchToProps = (dispatch: (action: ActionTypes) => void) => {\r\n    return {\r\n        /*updateNewPostText: (text: string) => {\r\n            dispatch(updateNewPostActionCreator(text))\r\n        },*/\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./My posts/ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./My posts/MyPostsContainer\";\r\nimport {ProfileUserPropsType} from \"../../Redux/Profile-reducer\";\r\n\r\n\r\nexport type ProfileNewType = {\r\n    profile: ProfileUserPropsType\r\n    status: string\r\n    updateStatusThunk: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: any) => void\r\n    saveProfile: (profile: ProfileUserPropsType) => Promise<any>\r\n}\r\n\r\nconst Profile = (props: ProfileNewType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} saveProfile={props.saveProfile} status={props.status}\r\n                         updateStatusThunk={props.updateStatusThunk} isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getProfileThunk,\r\n    getStatusThunk,\r\n    ProfileUserPropsType,\r\n    savePhoto, saveProfile,\r\n    updateStatusThunk\r\n} from \"../../Redux/Profile-reducer\";\r\nimport {ReduxStateType} from \"../../Redux/Redux-Stor\";\r\nimport {ProfilePageType} from \"../../Redux/State\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport withAuthRedirect from \"../../hoc/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getProfileThunk: (userId: string) => void\r\n    getStatusThunk: (userId: string) => void\r\n    updateStatusThunk: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n    saveProfile: (profile: ProfileUserPropsType) => Promise<any>\r\n}\r\n\r\ntype ProfileContainerPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component <PropsType, ProfilePageType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = '26538'\r\n        }\r\n\r\n        this.props.getProfileThunk(userId)\r\n        this.props.getStatusThunk(userId)\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<ProfilePageType>, snapshot?: any) {\r\n        if(this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        /* if (!this.props.isAuth) return <Redirect to={'/login'}/>*/\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} isOwner={!this.props.match.params.userId}\r\n                         profile={this.props.profile} status={this.props.status}\r\n                         updateStatusThunk={this.props.updateStatusThunk}\r\n                         savePhoto={this.props.savePhoto}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n};\r\n\r\n//хок\r\nlet AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n/*AuthRedirectComponent = connect(mapStateToPropsForRedirect)(AuthRedirectComponent)*/\r\n\r\n\r\nexport type mapStateToPropsType = {\r\n    profile: ProfileUserPropsType\r\n    status: string\r\n    authorizedUserId: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: ReduxStateType): mapStateToPropsType => ({\r\n    profile: state.messagePage.profile,\r\n    status: state.messagePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\n/*\r\nlet mapStateToPropsForRedirect = (state: ReduxStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n*/\r\n\r\n\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getProfileThunk, getStatusThunk, updateStatusThunk, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)","import React from 'react';\r\nimport {Field, WrappedFieldInputProps, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport s from './FormsControls.module.css'\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\ntype FormsControls = {\r\n    input: WrappedFieldInputProps\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\n\r\nconst FormControl: React.FC<FormsControls> = ({input, meta: {touched, error}, children, ...props}) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Textarea: React.FC<FormsControls> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}> <textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<FormsControls> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                                         name: FormKeysType,\r\n                                                         validators: Array<FieldValidatorType>,\r\n                                                         component: React.FC<WrappedFieldProps>,\r\n                                                         props = {}, text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","import React, {Component, ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxStateType} from \"../Redux/Redux-Stor\";\r\n\r\n\r\ntype IsAuthPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: ReduxStateType): IsAuthPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nfunction withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: IsAuthPropsType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n};\r\n\r\nexport default withAuthRedirect;","import React from 'react';\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required!'\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value: string) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__mwFpC\",\"error\":\"FormsControls_error__TXWsV\",\"formSummaryError\":\"FormsControls_formSummaryError__avrPo\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatusThunk","onChange","e","currentTarget","value","reduxForm","form","handleSubmit","profile","error","onSubmit","className","s","createField","Input","type","Textarea","Object","keys","contacts","map","key","ProfileData","isOwner","toEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","savePhoto","saveProfile","Preloader","src","photos","large","userPhoto","event","target","files","formData","then","initialValues","message","like","MyPosts","React","postElement","posts","p","id","reverse","AddNewPostFormRedux","values","addPost","newPostText","maxLength10","maxLengthCreator","Field","component","name","validate","required","placeholder","connect","state","messagePage","dispatch","addPostActionCreator","ProfileContainer","userId","this","match","params","getProfileThunk","getStatusThunk","refreshProfile","prevProps","prevState","snapshot","withAuthRedirect","compose","authorizedUserId","auth","isAuth","withRouter","FormControl","input","meta","touched","children","hasError","restProps","validators","text","mapStateToPropsForRedirect","Component","to","maxLength","length","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}
{"version":3,"file":"static/js/944.9bcc346e.chunk.js","mappings":"2RAcaA,EAA8F,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WAC9H,OACI,kBAAMC,SAAUH,EAAhB,WACKI,EAAAA,EAAAA,IAAqC,QAAS,QAAS,CAACC,EAAAA,GAAWC,EAAAA,KACnEF,EAAAA,EAAAA,IAAqC,WAAY,WAAY,CAACC,EAAAA,GAAWC,EAAAA,GAAO,CAACC,KAAM,cACvFH,EAAAA,EAAAA,SAAqCI,EAAW,aAAc,GAAIF,EAAAA,GAAO,CAACC,KAAM,YAAa,eAE7FL,IAAc,gBAAKO,IAAKP,IACxBA,IAAcE,EAAAA,EAAAA,IAAqC,qBAAsB,UAAW,CAACC,EAAAA,GAAWC,EAAAA,GAAO,IAGvGL,IAAS,gBAAKS,UAAWC,EAAAA,EAAAA,iBAAhB,SACLV,KAGL,0BACI,4CAMHW,GAAiBC,EAAAA,EAAAA,GAA2C,CAACC,KAAM,SAAlDD,CAA4Dd,GAoC1F,WAAegB,EAAAA,EAAAA,KALS,SAACC,GAAD,MAA4B,CAChDd,WAAYc,EAAMC,KAAKf,WACvBgB,OAAQF,EAAMC,KAAKC,UAGiB,CAACC,QAAAA,EAAAA,IAAzC,EAxBwB,WACpB,IAAMjB,GAAakB,EAAAA,EAAAA,KAAY,SAACJ,GAAD,OAA2BA,EAAMC,KAAKf,cAC/DgB,GAASE,EAAAA,EAAAA,KAAY,SAACJ,GAAD,OAA2BA,EAAMC,KAAKC,UAC3DG,GAAWC,EAAAA,EAAAA,MAMjB,OAAIJ,GACO,SAAC,KAAD,CAAUK,GAAI,cAGlB,4BACH,mCACA,SAACX,EAAD,CAAgBT,SAVH,SAACqB,GACdH,GAASF,EAAAA,EAAAA,IAAQK,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,WAS9C1B,WAAYA,W,+PCpDlD2B,EAAuC,SAAC,GAAwD,EAAvDC,MAAwD,IAAD,IAAhDC,KAAOC,EAAyC,EAAzCA,QAAS/B,EAAgC,EAAhCA,MAAQgC,EAAwB,EAAxBA,SACpEC,IAD4F,YACjFF,GAAW/B,GAE5B,OACI,iBAAKS,UAAWC,EAAAA,EAAAA,YAAgB,KAAOuB,EAAWvB,EAAAA,EAAAA,MAAU,IAA5D,WACI,yBACKsB,IAEJC,IAAY,0BAAOjC,QAKnBkC,EAAoC,SAACC,GAC9C,IAAON,EAAuCM,EAAvCN,MAA0BO,GAAaD,EAAhCL,KAAgCK,EAA1BH,UAApB,OAA8CG,EAA9C,IACA,OAAO,UAACP,GAAD,kBAAiBO,GAAjB,mBAAyB,uCAAcN,GAAWO,SAGhD/B,EAAiC,SAAC8B,GAC3C,IAAON,EAAuCM,EAAvCN,MAA0BO,GAAaD,EAAhCL,KAAgCK,EAA1BH,UAApB,OAA8CG,EAA9C,IACA,OAAO,SAACP,GAAD,kBAAiBO,GAAjB,cAAwB,oCAAWN,GAAWO,QAGlD,SAASjC,EAAyCkC,EACAC,EACAC,EACAC,GACwB,IAAxBL,EAAuB,uDAAf,GAAIM,EAAW,uDAAJ,GACxE,OAAO,4BACH,SAAC,KAAD,QAAOJ,YAAaA,EAAaC,KAAMA,EAChCI,SAAUH,EACVC,UAAWA,GACPL,IAJR,IAKCM,O,4ECzCL,IAAMrC,EAA+B,SAACuC,GACzC,IAAIA,EACJ,MAAO,sBAGEC,EAAmB,SAACC,GAAD,OAA2C,SAACF,GACxE,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCR3C,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB","sources":["components/Login/Login.tsx","components/common/FormControls/FormsControls.tsx","utils/validators/validators.tsx","webpack://samurai-way/./src/components/common/FormControls/FormsControls.module.css?3030"],"sourcesContent":["import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input} from \"../common/FormControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport {LoginTC} from \"../../Redux/AuthReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {ReduxStateType} from \"../../Redux/Redux-Stor\";\r\nimport s from './../common/FormControls/FormsControls.module.css'\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], Input)}\r\n            {createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, {type: 'password'})}\r\n            {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\r\n\r\n            {captchaUrl && <img src={captchaUrl}/>}\r\n            {captchaUrl && createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], Input, {})}\r\n\r\n\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const ReduxLoginForm = reduxForm<FormDataType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<FormDataType>\r\n\r\n\r\nconst Login: React.FC = () => {\r\n    const captchaUrl = useSelector((state: ReduxStateType) => state.auth.captchaUrl)\r\n    const isAuth = useSelector((state: ReduxStateType) => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        dispatch(LoginTC(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <ReduxLoginForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: ReduxStateType) => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {LoginTC})(Login);","import React from 'react';\r\nimport {Field, WrappedFieldInputProps, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport s from './FormsControls.module.css'\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\ntype FormsControls = {\r\n    input: WrappedFieldInputProps\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\n\r\nconst FormControl: React.FC<FormsControls> = ({input, meta: {touched, error}, children, ...props}) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Textarea: React.FC<FormsControls> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}> <textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<FormsControls> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                                         name: FormKeysType,\r\n                                                         validators: Array<FieldValidatorType>,\r\n                                                         component: React.FC<WrappedFieldProps>,\r\n                                                         props = {}, text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","import React from 'react';\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required!'\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value: string) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__mwFpC\",\"error\":\"FormsControls_error__TXWsV\",\"formSummaryError\":\"FormsControls_formSummaryError__avrPo\"};"],"names":["LoginForm","handleSubmit","error","captchaUrl","onSubmit","createField","required","Input","type","undefined","src","className","s","ReduxLoginForm","reduxForm","form","connect","state","auth","isAuth","LoginTC","useSelector","dispatch","useDispatch","to","formData","email","password","rememberMe","captcha","FormControl","input","meta","touched","children","hasError","Textarea","props","restProps","placeholder","name","validators","component","text","validate","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}
{"version":3,"file":"static/js/944.c8b8ba12.chunk.js","mappings":"qSAiBaA,EAAuD,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,MAChF,OACI,kBAAMC,SAAUF,EAAhB,WAOI,0BACI,SAAC,IAAD,CAAOG,YAAa,QAASC,KAAM,QAASC,UAAWC,EAAAA,EAAOC,SAAU,CAACC,EAAAA,QAE7E,0BACI,SAAC,IAAD,CAAOL,YAAa,WAAYC,KAAM,WAAYK,KAAM,WAAYJ,UAAWC,EAAAA,EACxEC,SAAU,CAACC,EAAAA,QAEtB,4BACI,SAAC,IAAD,CAAOH,UAAWC,EAAAA,EAAOF,KAAM,aAAcK,KAAM,WAAYF,SAAU,CAACC,EAAAA,KAD9E,kBAGCP,IAAS,gBAAKS,UAAWC,EAAAA,EAAAA,iBAAhB,SACLV,KAIL,0BACI,4CAMHW,GAAiBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,SAA/BD,CAAyCd,GAqBvE,WAAegB,EAAAA,EAAAA,KAJS,SAACC,GAAD,MAA4B,CAChDC,OAAQD,EAAME,KAAKD,UAGiB,CAACE,QAAAA,EAAAA,IAAzC,EAnBc,SAACC,GAKX,OAAIA,EAAMH,QACC,SAAC,KAAD,CAAUI,GAAI,cAGlB,4BACH,mCACA,SAACT,EAAD,CAAgBV,SAVH,SAACoB,GACdF,EAAMD,QAAQG,EAASC,MAAOD,EAASE,SAAUF,EAASG,sB,2NCzC5DC,EAAuC,SAAC,GAAuD,EAAtDC,MAAuD,IAAD,IAA/CC,KAAOC,EAAwC,EAAxCA,QAAS5B,EAA+B,EAA/BA,MAAQ6B,EAAuB,EAAvBA,SACpEC,IAD2F,YAChFF,GAAW5B,GAE5B,OACI,iBAAKS,UAAWC,EAAAA,EAAAA,YAAgB,KAAOoB,EAAWpB,EAAAA,EAAAA,MAAU,IAA5D,WACI,yBACKmB,IAEJC,IAAY,0BAAO9B,QAKnB+B,EAAoC,SAACZ,GAC9C,IAAOO,EAAuCP,EAAvCO,MAA0BM,GAAab,EAAhCQ,KAAgCR,EAA1BU,UAApB,OAA8CV,EAA9C,IACA,OAAO,UAACM,GAAD,kBAAiBN,GAAjB,mBAAyB,uCAAcO,GAAWM,SAGhD3B,EAAiC,SAACc,GAC3C,IAAOO,EAAuCP,EAAvCO,MAA0BM,GAAab,EAAhCQ,KAAgCR,EAA1BU,UAApB,OAA8CV,EAA9C,IACA,OAAO,SAACM,GAAD,kBAAiBN,GAAjB,cAAwB,oCAAWO,GAAWM,S,4EC7BlD,IAAMzB,EAAW,SAAC0B,GACrB,IAAIA,EACJ,MAAO,sBAKEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACpD,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCT3C,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB","sources":["components/Login/Login.tsx","components/common/FormControls/FormsControls.tsx","utils/validators/validators.tsx","webpack://samurai-way/./src/components/common/FormControls/FormsControls.module.css?3030"],"sourcesContent":["import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {LoginTC} from \"../../Redux/AuthReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {ReduxStateType} from \"../../Redux/Redux-Stor\";\r\nimport s from './../common/FormControls/FormsControls.module.css'\r\n\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n           {/* {CreateField(\"Email\", \"email\", [required], Input, null, null)}\r\n            <Field placeholder={\"Email\"} name={\"email\"} component={Input} validate={[required]}/>\r\n            {CreateField(\"Password\", \"password\", [required], Input, {type: \"password\"}, null)}\r\n            {CreateField(null, \"password\", [required], Input, {type: \"checkbox\"}, \"remember me\")}*/}\r\n\r\n            <div>\r\n                <Field placeholder={\"Email\"} name={\"email\"} component={Input} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"Password\"} name={\"password\"} type={\"password\"} component={Input}\r\n                       validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field component={Input} name={\"rememberMe\"} type={\"checkbox\"} validate={[required]}/> remember me\r\n            </div>\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n\r\n\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const ReduxLoginForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\nconst Login = (props: any) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.LoginTC(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <ReduxLoginForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: ReduxStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {LoginTC})(Login);","import React from 'react';\r\nimport {Field, WrappedFieldInputProps, WrappedFieldMetaProps} from \"redux-form\";\r\nimport s from './FormsControls.module.css'\r\nimport {required} from \"../../../utils/validators/validators\";\r\n\r\ntype FormsControls = {\r\n    input: WrappedFieldInputProps\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\n\r\nconst FormControl: React.FC<FormsControls> = ({input, meta: {touched, error}, children,...props}) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Textarea: React.FC<FormsControls> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}> <textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<FormsControls> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\n/*\r\nexport const CreateField = (placeholder: string | null, name: string, validate: typeof required[], component: React.FC<FormsControls>, props: any, text: string | null) => (\r\n        <div>\r\n            <Field placeholder={placeholder} name={name} component={validate} validate={component} {...props}/> {text}\r\n        </div>\r\n    )\r\n*/\r\n\r\n/*\r\nexport const Textarea: React.FC<FormsControls> = ({input, meta, ...props}) => {\r\n    /!*const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <textarea {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    );*!/\r\n};\r\n\r\nexport const Input: React.FC<FormsControls> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <input {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    );\r\n};*/\r\n","import React from 'react';\r\n\r\nexport const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required!'\r\n};\r\n\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__mwFpC\",\"error\":\"FormsControls_error__TXWsV\",\"formSummaryError\":\"FormsControls_formSummaryError__avrPo\"};"],"names":["LoginForm","handleSubmit","error","onSubmit","placeholder","name","component","Input","validate","required","type","className","s","ReduxLoginForm","reduxForm","form","connect","state","isAuth","auth","LoginTC","props","to","formData","email","password","rememberMe","FormControl","input","meta","touched","children","hasError","Textarea","restProps","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}
{"version":3,"file":"static/js/320.f2d55a38.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/common/FormControls/FormsControls.tsx","hoc/authRedirect.tsx","utils/validators/validators.tsx","webpack://samurai-way/./src/components/common/FormControls/FormsControls.module.css?3030"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__QBHV3\",\"dialogsItems\":\"Dialogs_dialogsItems__8LRgU\",\"active\":\"Dialogs_active__6+i5s\",\"dialog\":\"Dialogs_dialog__lsGMU\",\"messages\":\"Dialogs_messages__MOonn\",\"message\":\"Dialogs_message__baZun\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogType} from \"../../../Redux/state\";\r\n\r\n\r\nconst DialogItem = (props: DialogType) => {\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {MessageType} from \"../../../Redux/state\";\r\n\r\n\r\nconst Message = (props: MessageType) => {\r\n\r\n    let newMessageElement = React.createRef <HTMLTextAreaElement>()\r\n\r\n    let addMessage = () => {\r\n        let text = newMessageElement.current?.value;\r\n        alert(text)\r\n    }\r\n\r\n    return <div>\r\n        <div className={s.message}>{props.message}</div>\r\n    </div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsDataType} from \"../../Redux/state\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nexport type DialogNewType = {\r\n\r\n    updateMessageBodyCreator: (body: string) => void\r\n    sendMessageCreator: (newMessageText: string) => void\r\n    profilePage: DialogsDataType\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nconst Dialogs = (props: DialogNewType) => {\r\n    let state = props.profilePage\r\n    let dialogsElement = state.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n    let messageElement = state.messages.map(m => <Message key={m.id} message={m.message} id={m.id}/>)\r\n\r\n    let newMessageBody = state.newMessageText;\r\n\r\n    let addNewMessage = (value: any) => {\r\n        props.sendMessageCreator(value.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n\r\n            <div className={s.dialogsItems}>\r\n                <img src='https://pixelbox.ru/wp-content/uploads/2021/09/avatar-boys-vk-60-scaled.jpg'/>\r\n                {dialogsElement}\r\n\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElement}</div>\r\n\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype FormDataType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} validate={[required, maxLength100]} name=\"newMessageText\"\r\n                       placeholder=\"Enter your message\"/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {ActionTypes} from \"../../Redux/state\";\r\nimport {sendMessageCreator} from \"../../Redux/dialogs-reduser\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxStateType} from \"../../Redux/redux-stor\";\r\nimport withAuthRedirect from \"../../hoc/authRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n//данные из стейна, пропсы\r\nlet mapStateToProps = (state: ReduxStateType) => {\r\n    return {\r\n        profilePage: state.profilePage,\r\n    }\r\n}\r\n\r\n//колбеки\r\nlet mapDispatchToProps = (dispatch: (action: ActionTypes) => void) => {\r\n    return {\r\n        sendMessageCreator: (newMessageText: string) => {\r\n            dispatch(sendMessageCreator(newMessageText))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);","import React from 'react';\r\nimport {Field, WrappedFieldInputProps, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport s from './FormsControls.module.css'\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\ntype FormsControls = {\r\n    input: WrappedFieldInputProps\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\n\r\nconst FormControl: React.FC<FormsControls> = ({input, meta: {touched, error}, children, ...props}) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Textarea: React.FC<FormsControls> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}> <textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<FormsControls> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                                         name: FormKeysType,\r\n                                                         validators: Array<FieldValidatorType>,\r\n                                                         component: React.FC<WrappedFieldProps>,\r\n                                                         props = {}, text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","import React, {Component, ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxStateType} from \"../Redux/redux-stor\";\r\n\r\n\r\ntype IsAuthPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: ReduxStateType): IsAuthPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nfunction withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: IsAuthPropsType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n};\r\n\r\nexport default withAuthRedirect;","import React from 'react';\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required!'\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value: string) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__mwFpC\",\"error\":\"FormsControls_error__TXWsV\",\"formSummaryError\":\"FormsControls_formSummaryError__avrPo\"};"],"names":["props","className","s","to","id","name","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","component","Textarea","validate","required","placeholder","state","profilePage","dialogsElement","dialogs","map","d","messageElement","messages","m","newMessageText","src","value","sendMessageCreator","compose","connect","dispatch","withAuthRedirect","Dialogs","FormControl","input","meta","touched","error","children","hasError","restProps","Input","createField","validators","text","mapStateToPropsForRedirect","isAuth","auth","Component","maxLength","length"],"sourceRoot":""}
{"version":3,"file":"static/js/229.16b48a17.chunk.js","mappings":"sMACA,G,QAAA,CAAgB,QAAU,yBAAyB,iBAAmB,kCAAkC,QAAU,yBAAyB,QAAU,yBAAyB,gBAAkB,iCAAiC,aAAe,8BAA8B,mBAAqB,oCAAoC,aAAe,gC,+CCQhVA,GAAYC,EAAAA,EAAAA,GAAiB,KAiBtBC,GAAmBC,EAAAA,EAAAA,GAA+B,CAC3DC,KAAM,wBADsBD,EAhBgC,SAA1DE,EAA2DC,GAC7D,IAAOC,EAAgBD,EAAhBC,aACP,OACI,kBAAMC,SAAUD,EAAcE,UAAWC,EAAAA,KAAzC,WACI,gBAAKD,UAAWC,EAAAA,KAAhB,UACI,SAACC,EAAA,EAAD,CAAOC,YAAY,oBACZC,KAAK,OACLC,KAAK,iBACLC,SAAU,CAACC,EAAAA,EAAUhB,GACrBiB,UAAWC,EAAAA,QAGtB,SAAC,KAAD,CAAcd,KAAMC,UCrBhC,EAA+B,mCAA/B,EAA2E,6B,UCqB9Dc,EAAe,SAACb,GACzB,OACI,gBAAKG,UAAWC,EAAhB,UACI,UAAC,KAAD,CAASU,GAAI,YAAcd,EAAMe,GAAjC,UACKf,EAAMQ,MACP,gBAAKL,UAAWC,EAAUY,IAAKhB,EAAMiB,OAAQC,IAAK,iBC1BlE,EAAmC,0CAAnC,EAAuF,iCAAvF,EAAqI,oCAArI,EAAkL,gCCUrKC,EAAkB,SAACnB,GAC5B,OACI,iBAAKG,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAUY,IAAKhB,EAAMiB,OAAQC,IAAK,YAClD,gBAAKf,UAAWC,EAAhB,UACI,iBAAMD,UAAWC,EAAjB,SAA6BJ,EAAMoB,gBCsCnD,EArCgB,SAACpB,GACb,IAAIqB,EAAQrB,EAAMsB,YAEdC,EAAiBF,EAAMG,QAAQC,KAAI,SAAAC,GAAI,OAAI,SAACb,EAAD,CAAcE,GAAIW,EAAKX,GAAIP,KAAMkB,EAAKlB,KAAMS,OAAQS,EAAKT,QACtCS,EAAKX,OACnEY,EAAiBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAACV,EAAD,CAA4BC,QAASS,EAAET,QAASL,GAAIc,EAAEd,GAAIE,OAAQY,EAAEZ,QAA9CY,EAAEd,OAEhDM,EAAMS,eAM3B,OACI,gBAAK3B,UAAWC,EAAAA,QAAhB,UACI,gBAAKD,UAAWC,EAAAA,iBAAhB,UAEI,iBAAKD,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SAEKmB,KAGL,iBAAKpB,UAAWC,EAAAA,gBAAhB,WACI,yBAAMuB,KAEN,gBAAKxB,UAAWC,EAAAA,mBAAhB,UACI,SAACR,EAAD,CAAkBM,SAlBtB,SAAC6B,GACjB/B,EAAMgC,mBAAmBD,EAAMD,gCCAvC,GAAeG,EAAAA,EAAAA,KAA6BC,EAAAA,EAAAA,KAftB,SAACb,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAKF,SAACa,GACtB,MAAO,CACHH,mBAAoB,SAACF,GACjBK,GAASH,EAAAA,EAAAA,GAAmBF,SAKkDM,EAAAA,EAA1F,CAA4GC,I,+FCjBxGC,EAA6B,SAACjB,GAAD,MAA6C,CAC1EkB,OAAQlB,EAAMmB,KAAKD,SAevB,IAXA,SAA6BE,GAQzB,OADqCP,EAAAA,EAAAA,IAAQI,EAARJ,EANrC,SAA2BlC,GACvB,IAAKuC,EAAwBvC,EAAxBuC,OAAWG,GAAhB,OAA6B1C,EAA7B,GACA,OAAKuC,GACE,SAACE,GAAD,UAAeC,KADF,SAAC,KAAD,CAAU5B,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/MessageForm.tsx","webpack://samurai-way/./src/components/Dialogs/DialogItem/DialogsItems.module.css?93f9","components/Dialogs/DialogItem/DialogsItems.tsx","webpack://samurai-way/./src/components/Dialogs/DialogsMessages.module.css?8767","components/Dialogs/DialogsMessages.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/authRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Dialogs_content__7UT5u\",\"dialogsContainer\":\"Dialogs_dialogsContainer__yQYtJ\",\"dialogs\":\"Dialogs_dialogs__QBHV3\",\"sidebar\":\"Dialogs_sidebar__8aUdG\",\"dialogsMessages\":\"Dialogs_dialogsMessages__QJjyS\",\"dialogsItems\":\"Dialogs_dialogsItems__8LRgU\",\"addDialogContainer\":\"Dialogs_addDialogContainer__3u1rs\",\"messageInput\":\"Dialogs_messageInput__jnkmx\"};","import {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {FC} from \"react\";\r\nimport {ButtonSubmit, TextareaFC} from \"../../common/FormControls/FormsControls\";\r\nimport s from '../Dialogs.module.css'\r\n\r\nexport type MessageFormDataType = {\r\n    newMessageText: string\r\n}\r\nconst maxLength = maxLengthCreator(250)\r\nconst MessageForm: FC<InjectedFormProps<MessageFormDataType>> = (props) => {\r\n    const {handleSubmit} = props\r\n    return (\r\n        <form onSubmit={handleSubmit} className={s.form}>\r\n            <div className={s.data}>\r\n                <Field placeholder='Enter you message'\r\n                       type='text'\r\n                       name='newMessageText'\r\n                       validate={[required, maxLength]}\r\n                       component={TextareaFC}\r\n                />\r\n            </div>\r\n            <ButtonSubmit form={MessageForm}/>\r\n        </form>\r\n    )\r\n}\r\nexport const MessageReduxForm = reduxForm<MessageFormDataType>({\r\n    form: 'dialogAddMessageForm'\r\n})(MessageForm)\r\n\r\n/*type FormDataType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} validate={[required, maxLength100]} name=\"newMessageText\"\r\n                       placeholder=\"Enter your message\"/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm)*/","// extracted by mini-css-extract-plugin\nexport default {\"dialogsItems\":\"DialogsItems_dialogsItems__RlQLJ\",\"avatar\":\"DialogsItems_avatar__nGmGo\",\"active\":\"DialogsItems_active__Gvk7H\"};","import React from 'react';\r\nimport s from './DialogsItems.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogType} from \"../../../Redux/state\";\r\n\r\n\r\n// const DialogItem = (props: DialogType) => {\r\n//     return <div className={s.dialog + ' ' + s.active}>\r\n//         <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n//     </div>\r\n// }\r\n//\r\n//\r\n// export default DialogItem;\r\n\r\ntype DialogsItemsProps = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n    key: number\r\n}\r\n\r\nexport const DialogsItems = (props: DialogsItemsProps) => {\r\n    return (\r\n        <div className={s.dialogsItems}>\r\n            <NavLink to={'/dialogs/' + props.id}>\r\n                {props.name}\r\n                <img className={s.avatar} src={props.avatar} alt={'avatar'}/>\r\n            </NavLink>\r\n\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"messageContainer\":\"DialogsMessages_messageContainer__gcr-C\",\"message\":\"DialogsMessages_message__-d6SC\",\"messageBox\":\"DialogsMessages_messageBox__BrisR\",\"avatar\":\"DialogsMessages_avatar__TZUsq\"};","import s from \"./DialogsMessages.module.css\";\r\n\r\nimport React from \"react\";\r\n\r\n\r\ntype DialogsMessagesProps = {\r\n    message: string\r\n    avatar?: string\r\n    key: number\r\n    id: number\r\n}\r\nexport const DialogsMessages = (props: DialogsMessagesProps) => {\r\n    return (\r\n        <div className={s.messageContainer}>\r\n            <img className={s.avatar} src={props.avatar} alt={'avatar'}/>\r\n            <div className={s.messageBox}>\r\n                <span className={s.message}>{props.message}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsDataType} from \"../../Redux/state\";\r\nimport {MessageReduxForm} from \"./Message/MessageForm\";\r\nimport {DialogsItems} from \"./DialogItem/DialogsItems\";\r\nimport {DialogsMessages} from \"./DialogsMessages\";\r\n\r\nexport type DialogNewType = {\r\n\r\n    updateMessageBodyCreator: (body: string) => void\r\n    sendMessageCreator: (newMessageText: string) => void\r\n    profilePage: DialogsDataType\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nconst Dialogs = (props: DialogNewType) => {\r\n    let state = props.profilePage\r\n\r\n    let dialogsElement = state.dialogs.map(elem => <DialogsItems id={elem.id} name={elem.name} avatar={elem.avatar}\r\n                                                                 key={elem.id}/>)\r\n    let messageElement = state.messages.map(m => <DialogsMessages key={m.id} message={m.message} id={m.id} avatar={m.avatar}/>)\r\n\r\n    let newMessageBody = state.newMessageText;\r\n\r\n    let addNewMessage = (value: any) => {\r\n        props.sendMessageCreator(value.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <div className={s.dialogsContainer}>\r\n\r\n                <div className={s.dialogs}>\r\n                    <div className={s.dialogsItems}>\r\n                        {/* <img src='https://pixelbox.ru/wp-content/uploads/2021/09/avatar-boys-vk-60-scaled.jpg'/>*/}\r\n                        {dialogsElement}\r\n\r\n                    </div>\r\n                    <div className={s.dialogsMessages}>\r\n                        <div>{messageElement}</div>\r\n\r\n                        <div className={s.addDialogContainer}>\r\n                            <MessageReduxForm onSubmit={addNewMessage}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {ActionTypes} from \"../../Redux/state\";\r\nimport {sendMessageCreator} from \"../../Redux/dialogs-reduser\";\r\n\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxStateType} from \"../../Redux/redux-stor\";\r\nimport withAuthRedirect from \"../../hoc/authRedirect\";\r\nimport {compose} from \"redux\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\n\r\n//данные из стейна, пропсы\r\nlet mapStateToProps = (state: ReduxStateType) => {\r\n    return {\r\n        profilePage: state.profilePage,\r\n    }\r\n}\r\n\r\n//колбеки\r\nlet mapDispatchToProps = (dispatch: (action: ActionTypes) => void) => {\r\n    return {\r\n        sendMessageCreator: (newMessageText: string) => {\r\n            dispatch(sendMessageCreator(newMessageText))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);","import React, {Component, ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxStateType} from \"../Redux/redux-stor\";\r\n\r\n\r\ntype IsAuthPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: ReduxStateType): IsAuthPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nfunction withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: IsAuthPropsType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n};\r\n\r\nexport default withAuthRedirect;"],"names":["maxLength","maxLengthCreator","MessageReduxForm","reduxForm","form","MessageForm","props","handleSubmit","onSubmit","className","s","Field","placeholder","type","name","validate","required","component","TextareaFC","DialogsItems","to","id","src","avatar","alt","DialogsMessages","message","state","profilePage","dialogsElement","dialogs","map","elem","messageElement","messages","m","newMessageText","value","sendMessageCreator","compose","connect","dispatch","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component","restProps"],"sourceRoot":""}